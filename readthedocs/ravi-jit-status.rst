Ravi JIT Compilation Status
===========================

The JIT compilation status of the Lua and Ravi bytecodes are given below.

This information was last updated on 15th March 2015. As new bytecodes are being added to the JIT compiler on a regular basis
the status information below may be slightly out of date.

Note that if a Lua functions contains a bytecode that cannot be be JITed then the function cannot be JITed.

+-------------------------+----------+--------------------------------------------------+
| name                    | JITed?   | description                                      |
+=========================+==========+==================================================+
| OP_MOVE                 | YES      | R(A) := R(B)                                     |
+-------------------------+----------+--------------------------------------------------+
| OP_LOADK                | YES      | R(A) := Kst(Bx)                                  |
+-------------------------+----------+--------------------------------------------------+
| OP_LOADKX               | NO       | R(A) := Kst(extra arg)                           |
+-------------------------+----------+--------------------------------------------------+
| OP_LOADBOOL             | YES      | R(A) := (Bool)B; if (C) pc++                     |
+-------------------------+----------+--------------------------------------------------+
| OP_LOADNIL              | YES      | R(A), R(A+1), ..., R(A+B) := nil                 |
+-------------------------+----------+--------------------------------------------------+
| OP_GETUPVAL             | YES      | R(A) := UpValue[B]                               |
+-------------------------+----------+--------------------------------------------------+
| OP_GETTABUP             | YES      | R(A) := UpValue[B][RK(C)]                        |
+-------------------------+----------+--------------------------------------------------+
| OP_GETTABLE             | YES      | R(A) := R(B)[RK(C)]                              |
+-------------------------+----------+--------------------------------------------------+
| OP_SETTABUP             | NO       | UpValue[A][RK(B)] := RK(C)                       |
+-------------------------+----------+--------------------------------------------------+
| OP_SETUPVAL             | NO       | UpValue[B] := R(A)                               |
+-------------------------+----------+--------------------------------------------------+
| OP_SETTABLE             | YES      | R(A)[RK(B)] := RK(C)                             |
+-------------------------+----------+--------------------------------------------------+
| OP_NEWTABLE             | YES      | R(A) := {} (size = B,C)                          |
+-------------------------+----------+--------------------------------------------------+
| OP_SELF                 | NO       | R(A+1) := R(B); R(A) := R(B)[RK(C)]              |
+-------------------------+----------+--------------------------------------------------+
| OP_ADD                  | YES      | R(A) := RK(B) + RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_SUB                  | YES      | R(A) := RK(B) - RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_MUL                  | YES      | R(A) := RK(B) * RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_MOD                  | YES      | R(A) := RK(B) % RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_POW                  | NO       | R(A) := RK(B) ^ RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_DIV                  | YES      | R(A) := RK(B) / RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_IDIV                 | YES      | R(A) := RK(B) // RK(C)                           |
+-------------------------+----------+--------------------------------------------------+
| OP_BAND                 | NO       | R(A) := RK(B) & RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_BOR                  | NO       | R(A) := RK(B) | RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_BXOR                 | NO       | R(A) := RK(B) ~ RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_SHL                  | NO       | R(A) := RK(B) << RK(C)                           |
+-------------------------+----------+--------------------------------------------------+
| OP_SHR                  | NO       | R(A) := RK(B) >> RK(C)                           |
+-------------------------+----------+--------------------------------------------------+
| OP_UNM                  | NO       | R(A) := -R(B)                                    |
+-------------------------+----------+--------------------------------------------------+
| OP_BNOT                 | NO       | R(A) := ~R(B)                                    |
+-------------------------+----------+--------------------------------------------------+
| OP_NOT                  | YES      | R(A) := not R(B)                                 |
+-------------------------+----------+--------------------------------------------------+
| OP_LEN                  | YES      | R(A) := length of R(B)                           |
+-------------------------+----------+--------------------------------------------------+
| OP_CONCAT               | NO       | R(A) := R(B).. ... ..R(C)                        |
+-------------------------+----------+--------------------------------------------------+
| OP_JMP                  | YES      | c+=sBx; if (A) close all upvalues >= R(A - 1)    |
+-------------------------+----------+--------------------------------------------------+
| OP_EQ                   | YES      | if ((RK(B) == RK(C)) ~= A) then pc++             |
+-------------------------+----------+--------------------------------------------------+
| OP_LT                   | YES      | if ((RK(B) <  RK(C)) ~= A) then pc++             |
+-------------------------+----------+--------------------------------------------------+
| OP_LE                   | YES      | if ((RK(B) <= RK(C)) ~= A) then pc++             |
+-------------------------+----------+--------------------------------------------------+
| OP_TEST                 | YES      | if not (R(A) <=> C) then pc++                    |
+-------------------------+----------+--------------------------------------------------+
| OP_TESTSET              | YES      | if (R(B) <=> C) then R(A) := R(B) else pc++      |
+-------------------------+----------+--------------------------------------------------+
| OP_CALL                 | YES      | R(A), .. ,R(A+C-2) := R(A)(R(A+1), .. ,R(A+B-1)) |
+-------------------------+----------+--------------------------------------------------+
| OP_TAILCALL             | YES      | return R(A)(R(A+1), ... ,R(A+B-1))               |
|                         |          | Compiled as OP_CALL so no tail call optimization |
+-------------------------+----------+--------------------------------------------------+
| OP_RETURN               | YES      | return R(A), ... ,R(A+B-2) (see note)            |
+-------------------------+----------+--------------------------------------------------+
| OP_FORLOOP              | YES      | R(A)+=R(A+2);                                    |
|                         |          | if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) } |
+-------------------------+----------+--------------------------------------------------+
| OP_FORPREP              | YES      | R(A)-=R(A+2); pc+=sBx                            |
+-------------------------+----------+--------------------------------------------------+
| OP_TFORCALL             | YES      | R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));   |
+-------------------------+----------+--------------------------------------------------+
| OP_TFORLOOP             | YES      | if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx } |
+-------------------------+----------+--------------------------------------------------+
| OP_SETLIST              | YES      | R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	        |
+-------------------------+----------+--------------------------------------------------+
| OP_CLOSURE              | NO       | R(A) := closure(KPROTO[Bx])                      |
+-------------------------+----------+--------------------------------------------------+
| OP_VARARG               | NO       | R(A), R(A+1), ..., R(A+B-2) = vararg             |
+-------------------------+----------+--------------------------------------------------+
| OP_EXTRAARG             | NO       | extra (larger) argument for previous opcode      |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_NEWARRAYI       | YES      | R(A) := array of int                             |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_NEWARRAYF       | YES      | R(A) := array of float                           |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_LOADIZ          | YES      | R(A) := tointeger(0)                             |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_LOADFZ          | YES      | R(A) := tonumber(0)                              |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_UNMF            | YES      | R(A) := -R(B) floating point                     |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_UNMI            | YES      | R(A) := -R(B) integer                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_ADDFF           | YES      | R(A) := RK(B) + RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_ADDFI           | YES      | R(A) := RK(B) + RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_ADDII           | YES      | R(A) := RK(B) + RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_ADDFN           | YES      | R(A) := RK(B) + C                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_ADDIN           | YES      | R(A) := RK(B) + C                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBFF           | YES      | R(A) := RK(B) - RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBFI           | YES      | R(A) := RK(B) - RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBIF           | YES      | R(A) := RK(B) - RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBII           | YES      | R(A) := RK(B) - RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBFN           | YES      | R(A) := RK(B) - C                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBNF           | YES      | R(A) := B - RK(C)                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBIN           | YES      | R(A) := RK(B) - C                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SUBNI           | YES      | R(A) := B - RK(C)                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MULFF           | YES      | R(A) := RK(B) * RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MULFI           | YES      | R(A) := RK(B) * RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MULII           | YES      | R(A) := RK(B) * RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MULFN           | YES      | R(A) := RK(B) * C                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MULIN           | YES      | R(A) := RK(B) * C                                |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_DIVFF           | YES      | R(A) := RK(B) / RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_DIVFI           | YES      | R(A) := RK(B) / RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_DIVIF           | YES      | R(A) := RK(B) / RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_DIVII           | YES      | R(A) := RK(B) / RK(C)                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_TOINT           | YES      | R(A) := toint(R(A))                              |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_TOFLT           | YES      | R(A) := tofloat(R(A))                            |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_TOARRAYI        | NO       | R(A) := to_arrayi(R(A))                          |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_TOARRAYF        | NO       | R(A) := to_arrayf(R(A))                          |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MOVEI           | YES      | R(A) := R(B), check R(B) is integer              |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MOVEF           | YES      | R(A) := R(B), check R(B) is number               |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MOVEAI          | NO       | R(A) := R(B), check R(B) is array of integer     |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_MOVEAF          | NO       | R(A) := R(B), check R(B) is array of numbers     |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_GETTABLE_AI     | NO       | R(A) := R(B)[RK(C)] where R(B) is array of       |
|                         |          | integers and RK(C) is integer                    |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_GETTABLE_AF     | NO       | R(A) := R(B)[RK(C)] where R(B) is array of       |
|                         |          | numbers and RK(C) is integer                     |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SETTABLE_AI     | NO       | R(A)[RK(B)] := RK(C) where RK(B) is an integer   |
|                         |          | R(A) is array of integers, and RK(C) is an int   |
+-------------------------+----------+--------------------------------------------------+
| OP_RAVI_SETTABLE_AF     | NO       | R(A)[RK(B)] := RK(C) where RK(B) is an integer   |
|                         |          | R(A) is array of numbers, and RK(C) is a number  |
+-------------------------+----------+--------------------------------------------------+
