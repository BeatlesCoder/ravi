local z,x,y

-- test 1 
z = function(a)
  print(a)
  return a+1
end
x = function(f)
  local j = 5
  j = f(j)
  return j
end

assert(ravi.compile(x))
assert(x(z) == 6)
print("test 1 OK")

-- test 2
z = function (a,p)
  p(a)
  return 6
end

x = function (yy,p)
  local j = 5
  j = yy(j,p)
  return j
end

assert(ravi.compile(z))
assert(ravi.compile(x))
assert(x(z,print) == 6)
print("test 2 OK")

-- test 3
x = function () 
  local i, j:int
  j=0
  for i=1,1000000000 do
  	j = j+1
  end
  return j
end

assert(ravi.compile(x))
assert(x() == 1000000000)
print("test 3 OK")

-- test 4
x = function ()
  local j:double
  for i=1,1000000000 do
    j = j+1
  end
  return j
end

assert(ravi.compile(x))
assert(x() == 1000000000.0)
print("test 4 OK")

-- test 5
x = function ()
  local j = 0
  for i=2,6,3 do
    j = i
  end
  return j
end

assert(ravi.compile(x))
assert(x() == 5)
print("test 5 OK")

-- test 6
x = function ()
  local j = 0
  for i=2.0,6.0,3.1 do
    j = i
  end
  return j
end

assert(ravi.compile(x))
assert(x() == 5.1)
print("test 6 OK")

-- test 7
x = function ()
  local a=5
  return 1004,2
end

assert(ravi.compile(x))
assert(x() == 1004)
print("test 7 OK")

-- test 8
x = function ()
  if 1 == 2 then
    return 5.0
  end
  return 1.0
end

assert(ravi.compile(x))
assert(x() == 1.0)
print("test 8 OK")

-- test 9
x = function (y)
  if y == 1 then
    return 1.0
  elseif y == 5 then
    return 2.0
  else
    return 3.0
  end
end
assert(ravi.compile(x))
assert(x(5) == 2.0)
assert(x(4) == 3.0)
print("test 9 OK")

-- test 10
x = function (y,z)
  if y == 1 then
    if z == 1 then
      return 99.0
    else
      return z
    end
  elseif y == 5 then
    return 2.0
  else
    return 3.0
  end
end

assert(ravi.compile(x))
assert(x(1,1) == 99.0)
assert(x(1,2) == 2)
assert(x(1,5.3) == 5.3)
assert(x(5) == 2.0)
assert(x(4) == 3.0)
print("test 10 OK")

-- test 11
function tryme()
  local i,j = 5,6
  return i,j
end
assert(ravi.compile(tryme))
local i:int, j:int = tryme(); assert(i+j == 11)
print("test 11 OK")

-- test 12
function tryme()
  local a : double[], j:double = {}
  for i=1,10 do
    a[i] = i
    j = j + a[i]
  end
  return j
end
-- assert(ravi.compile(tryme)) 
assert(tryme() == 55.0)
print("test 12 OK")

-- test 13
function pisum()
    local sum : double
    for j = 1,500 do
        sum = 0.0
        for k = 1,10000 do
            sum = sum + 1.0/(k*k)
        end
    end
    return sum
end
assert(ravi.compile(pisum))
t1 = os.clock()
assert(math.abs(pisum()-1.644834071848065) < 1e-12)
t2 = os.clock()
print("time taken ", t2-t1)
print("test 13 OK")

