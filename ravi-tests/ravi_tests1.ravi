ravi.auto(true)

local z,x,y

-- test 1 
z = function(a)
  print(a)
  return a+1
end
x = function(f)
  local j = 5
  j = f(j)
  return j
end

assert(ravi.compile(x))
assert(x(z) == 6)
print("test 1 OK")

-- test 2
z = function (a,p)
  p(a)
  return 6
end

x = function (yy,p)
  local j = 5
  j = yy(j,p)
  return j
end

assert(ravi.compile(z))
assert(ravi.compile(x))
assert(x(z,print) == 6)
print("test 2 OK")

-- test 3
x = function () 
  local i, j:integer
  j=0
  for i=1,1000000000 do
  	j = j+1
  end
  return j
end

assert(ravi.compile(x))
assert(x() == 1000000000)
print("test 3 OK")

-- test 4
x = function ()
  local j:number
  for i=1,1000000000 do
    j = j+1
  end
  return j
end

assert(ravi.compile(x))
assert(x() == 1000000000.0)
print("test 4 OK")

-- test 5
x = function ()
  local j = 0
  for i=2,6,3 do
    j = i
  end
  return j
end

assert(ravi.compile(x))
assert(x() == 5)
print("test 5 OK")

-- test 7
x = function ()
  local a=5
  return 1004,2
end

assert(ravi.compile(x))
assert(x() == 1004)
print("test 7 OK")

-- test 8
x = function ()
  if 1 == 2 then
    return 5.0
  end
  return 1.0
end

assert(ravi.compile(x))
assert(x() == 1.0)
print("test 8 OK")

-- test 9
x = function (y)
  if y == 1 then
    return 1.0
  elseif y == 5 then
    return 2.0
  else
    return 3.0
  end
end
assert(ravi.compile(x))
assert(x(5) == 2.0)
assert(x(4) == 3.0)
print("test 9 OK")

-- test 10
x = function (y,z)
  if y == 1 then
    if z == 1 then
      return 99.0
    else
      return z
    end
  elseif y == 5 then
    return 2.0
  else
    return 3.0
  end
end

assert(ravi.compile(x))
assert(x(1,1) == 99.0)
assert(x(1,2) == 2)
assert(x(1,5.3) == 5.3)
assert(x(5) == 2.0)
assert(x(4) == 3.0)
print("test 10 OK")

-- test 11
function tryme()
  local i,j = 5,6
  return i,j
end
assert(ravi.compile(tryme))
local i:integer, j:integer = tryme(); assert(i+j == 11)
print("test 11 OK")

-- test 12
function tryme()
  local a : number[], j:number = {}
  for i=1,10 do
    a[i] = i
    j = j + a[i]
  end
  return j
end
if (not ravi.compile(tryme)) then
  print("test 12 FAILED to compile")
end
assert(tryme() == 55.0)
print("test 12 OK")

-- test 13
function pisum()
    local sum : number
    for j = 1,500 do
        sum = 0.0
        for k = 1,10000 do
            sum = sum + 1.0/(k*k)
        end
    end
    return sum
end
assert(ravi.compile(pisum))
assert(math.abs(pisum()-1.644834071848065) < 1e-12)
print("test 13 OK")

-- test 14
function tryme()
  local i,j = 5,6
  return i,j
end
function x(f)
  local i:integer, j:integer = f()
  return i+j
end
assert(ravi.compile(tryme))
assert(ravi.compile(x))
assert(x(tryme) == 11)
print("test 14 OK")

-- test 15
function tryme()
  local i,j = 5.1,"6.2"
  return i,j
end
function x(f)
  local i:number, j:number = f()
  return i+j
end
--ravi.dumplua(tryme)
--ravi.dumplua(x)
assert(ravi.compile(tryme))
assert(ravi.compile(x))
assert(x(tryme) == 11.3)
print("test 15 OK")

-- test 16
function tryme(x,y)
  if x < y then
    return 1
  else
    return 0
  end
end
--ravi.dumplua(tryme)
assert(ravi.compile(tryme))
assert(tryme(1,2) == 1)
assert(tryme(2,1) == 0)
print("test 16 OK")

-- test 17
function tryme(x,y)
  return x < y
end
--ravi.dumplua(tryme)
assert(ravi.compile(tryme))
assert(tryme(1,2))
assert(not tryme(2,1))
print("test 17 OK")

-- test 18
function tabtest(x)
  x[1] = 5
  return x[1]
end
--ravi.dumplua(tabtest)
assert(ravi.compile(tabtest))
--ravi.dumpllvm(tabtest)
assert(tabtest({}) == 5)
print("test 18 OK")

-- test 19
function optest()
  local a,b,c = 1, 5
  c = a and b
  return c
end
-- ravi.dumplua(optest)
assert(ravi.compile(optest))
-- ravi.dumpllvm(optest)
assert(optest() == 5)
print("test 19 OK")

-- test 20
function optest()
  local a,b,c = 1, 5
  c = a or b
  return c
end
-- ravi.dumplua(optest)
assert(ravi.compile(optest))
-- ravi.dumpllvm(optest)
assert(optest() == 1)
print("test 20 OK")

-- test 21
function optest()
  local a,b = 1, 5
  if a and b then
    return b
  end
  return a
end
-- ravi.dumplua(optest)
assert(ravi.compile(optest))
-- ravi.dumpllvm(optest)
assert(optest() == 5)
print("test 21 OK")

-- test 22
function optest()
  local a,b = nil, 5
  if a or b then
    return b
  end
  return a
end
-- ravi.dumplua(optest)
assert(ravi.compile(optest))
-- ravi.dumpllvm(optest)
assert(optest() == 5)
print("test 22 OK")

-- test 29
x=function()
  local j:number[] = {}
  return j
end
assert(ravi.compile(x))
y=x()
y[1] = 99.67
assert(y[1], 99.67)
assert(#y == 1)
print("test 29 OK")

-- test 30
days = {"Sunday", "Monday", "Tuesday", "Wednesday",
            "Thursday", "Friday", "Saturday"}
x = function() 
  local t
  for k,v in pairs(days) do
    t = v
  end
  return t
end
assert(ravi.compile(x))
assert(x() == "Saturday")
print("test 30 OK")

-- test 31
x = function(a)
  return not a
end
y = function(a)
  return a
end
assert(ravi.compile(x))
assert(ravi.compile(y))
assert(y(x()))
assert(y(x(false)))
assert(not y(x(true)))
print("test 31 OK")

-- test 34
x=function()
  local t={1,2,3,4,5}
  return #t
end
assert(ravi.compile(x))
assert(x() == 5)
print("test 34 OK")

-- test 36
t = { name_ = "ravi" }
function t:name() 
  return self.name_
end
function z(t)
  return t:name()
end
assert(ravi.compile(t.name))
assert(ravi.compile(z))
assert(z(t) == "ravi")
print("test 36 OK")

-- test 38
-- test ravi integer array
function f()
  local x: integer[] = { 1, 5 }
  local y: integer

  x[3] = x[1] + x[2]
  y = x[3]

  return y
end
assert(ravi.compile(f))
assert(f() == 6)
print("test 38 OK")

-- test 39
function f()
  local x: number[] = { 5.0, 6.1 }
  x[3] = x[1] + x[2]
  return x[3]
end
--ravi.dumplua(f)
assert(ravi.compile(f))
assert(math.abs(f()-11.1) < 1e-12)
print("test 39 OK")

-- test 41
-- Ravi arrays support for ipairs()
-- Plus special slot at [0]
x = function() 
  local nums: integer[] = {1, 2, 3, 4, 5, 6, 7}
  local t = 0
  assert(#nums == 7)
  nums[0] = 558
  for k,v in ipairs(nums) do
    t = t + v
  end
  assert(nums[0] == 558)
  return t
end
assert(ravi.compile(x))
assert(x() == 28)
print("test 41 OK")

-- test 42
-- Ravi arrays support for pairs()
-- Plus special slot at [0]
x = function() 
  local nums: integer[] = {1, 2, 3, 4, 5, 6, 7}
  local t = 0
  assert(#nums == 7)
  nums[0] = 558
  for k,v in pairs(nums) do
    t = t + v
  end
  assert(nums[0] == 558)
  return t
end
assert(ravi.compile(x))
assert(x() == 28)
print("test 42 OK")

-- test 43
-- test creation of arrays and slice
x = function() 
  local zeros: integer[] = table.intarray(10, 0)
  local ones: integer[] = table.intarray(10, 1)

  local a : integer[] = table.slice(ones, 1, 10)
  assert(#zeros == 10)
  assert(#ones == 10)
  assert(#a == 10)

  local i = 0
  for k,v in ipairs(a) do
    i = i + v
  end
  assert(i == 10)
  local y = table.slice(ones, 10, 1)
  y[1] = 115
  return ones[10] == 115
end
assert(ravi.compile(x))
assert(x() == true)
print("test 43 OK")

-- test 44
matrix = {}
matrix.new = function (m, n) 
  local t = {m, n, table.numarray(m*n, 0)}
  return t
end

matrix.getcol = function(m, col)
  local rows = m[1]
  local cols = m[2]
  local data = m[3]
  assert(col > 0 and col <= cols)
  return table.slice(data, (col-1)*rows+1, rows)
end

matrix.getdata = function(m)
  return m[3]
end

matrix.datalen = function(data)
  return #data
end

x = function() 
  local m = matrix.new(5,5)
  local data: number[] = matrix.getdata(m)
  local data_len: integer = matrix.datalen(data)
  for i = 1,data_len do
    data[i] = i
  end
  -- get third col
  local col3 = matrix.getcol(m, 3)
  -- should be 11,12,13,14,15
  local n = 0
  for k,v in ipairs(col3) do
    n = n + v
  end
  -- should be 65
  return n
end

assert(ravi.compile(matrix.new))
assert(ravi.compile(matrix.getcol))
assert(ravi.compile(matrix.getdata))
assert(ravi.compile(x))
assert(x() == 65)
print("test 44 OK")

-- test 23
function testadd(a,b)
  return a+b
end
assert(ravi.compile(testadd))
assert(testadd(1,1) == 2)
assert(testadd(1.5,1.6) == 3.1)
assert(testadd("1.5",1.6) == 3.1)
assert(testadd("1.5","1.6") == 3.1)
print("test 23 OK")

-- test 24
function testsub(a,b)
  return a-b
end
assert(ravi.compile(testsub))
assert(testsub(1,1) == 0)
assert(math.abs(testsub(1.5,1.6)-(-0.1)) < 1e-12)
assert(math.abs(testsub("1.5",1.6)-(-0.1)) < 1e-12)
assert(math.abs(testsub("1.5","1.6")-(-0.1)) < 1e-12)
print("test 24 OK")

-- test 25
function testmul(a,b)
  return a*b
end
assert(ravi.compile(testmul))
assert(testmul(2,2) == 4)
assert(math.abs(testmul(1.5,1.6)-2.4) < 1e-12)
assert(math.abs(testmul("1.5",1.6)-2.4) < 1e-12)
assert(math.abs(testmul("1.5","1.6")-2.4) < 1e-12)
print("test 25 OK")


-- test 26
function testdiv(a,b)
  return a/b
end
assert(ravi.compile(testdiv))
assert(testdiv(2,2) == 1.0)
assert(math.abs(testdiv(1.5,1.6)-0.9375) < 1e-12)
assert(math.abs(testdiv("1.5",1.6)-0.9375) < 1e-12)
assert(math.abs(testdiv("1.5","1.6")-0.9375) < 1e-12)
print("test 26 OK")


-- test 37
-- this tests that within the for loop
-- the locals get mapped correctly to upvalues
function f()
  local a={}
  for i=1,2 do
    local y:integer = 0
    a[i] = function()
      y = y + 10
      return y;
    end
  end
  return a
end
assert(ravi.compile(f))
t = f()
assert(#t == 2)
assert(ravi.compile(t[1]))
assert(ravi.compile(t[2]))
assert(t[1]() == 10)
assert(t[2]() == 10)
assert(t[1]() == 20)
assert(t[2]() == 20)
print("test 37 OK")



-- test 27
-- upvalues
local x = 1
local y=function()
  local f = function()
               return x
            end
  ravi.compile(f)
  return f
end
--ravi.dumplua(y)
--ravi.compile(y)
local f = y()
assert(ravi.iscompiled(f))
--ravi.dumplua(f)
--ravi.dumpllvm(f)
assert(f() == 1)
x=5
assert(f() == 5)
print("test 27 OK")

-- test 28
-- upvalues
x1 = 3
local y=function()
  local f = function()
               return x1
            end
  ravi.compile(f)
  return f
end
--ravi.dumplua(y)
--ravi.compile(y)
local f = y()
assert(ravi.iscompiled(f))
--ravi.dumplua(f)
--ravi.dumpllvm(f)
assert(f() == 3)
x1=5
assert(f() == 5)
print("test 28 OK")

-- test 35
function x()
  local x = 1
  local f = function()
    x=x+1
    return x
  end
  return f
end
f=x()
assert(ravi.compile(f))
assert(f() == 2)
assert(f() == 3)
print("test 35 OK")

-- test setupval, getupval
function x() 
  local a = 0
  return function(x) a=a+x; return a; end
end
-- ravi.dumplua(x)
ravi.compile(x)
y=x()
ravi.compile(y)
assert(y(2) == 2)
assert(y(2) == 4)
assert(y(3) == 7)
print('test SETUPVAL and GETUPVAL Ok')

-- test 32
x=function(a,b) 
  return a%b
end
assert(ravi.compile(x))
assert(x(5,2) == 1)
assert(math.abs(x(5.1,2.1)-0.9) < 1e-12)
print("test 32 OK")

-- test 33
x=function(a,b) 
  return a//b
end
assert(ravi.compile(x))
assert(x(5,2) == 2)
assert(math.abs(x(5.5,2.1)-2.0) < 1e-12)
print("test 33 OK")

-- test 6
x = function ()
  local j = 0
  for i=2.0,6.0,3.1 do
    j = i
  end
  return j
end

if (not ravi.compile(x)) then
  print("test 6 FAILED to compile")
end
assert(x() == 5.1)
print("test 6 OK")

-- test parameter types
x = function (a: integer, b: number)
  local i: integer = a
  local j: number = b
  return i+j
end
--ravi.dumplua(x)
assert(x(1,5.5) == 6.5)
ravi.compile(x)
assert(x(1,5.5) == 6.5)
print'test params int,num OK'

x=function (a:number[], b:integer)
  local j: number = a[b]
  return j
end
function y()
  local t: number[] = { 4.2 }
  return x(t, 1)
end

assert(y() == 4.2)
ravi.compile(x)
ravi.compile(y)
assert(y() == 4.2)
print'test params num[],int OK'

-- test 40
function x(t) return t; end
function f()
  local tt: integer[] = {1}
  local ss: number[] = { 55.5 }
  tt = x(tt)
  ss = x(ss)
end
assert(ravi.compile(x))
assert(ravi.compile(f))
assert(pcall(f))
function f()
  local tt: integer[] = {1}
  tt = x({})
end
--ravi.dumplua(f)
print'+'
assert(ravi.compile(f))
assert(not pcall(f))
print'+'
function f()
  local tt: integer[] = {1}
  local ss: number[] = { 55.5 }
  ss = x(tt)
end
print'+'
assert(ravi.compile(f))
assert(not pcall(f))

print("test 40 OK")


